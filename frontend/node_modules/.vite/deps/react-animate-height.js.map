{
  "version": 3,
  "sources": ["../../react-animate-height/dist/esm/index.js"],
  "sourcesContent": ["var __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n// ------------------ Helpers\r\nfunction isNumber(n) {\r\n    const number = parseFloat(n);\r\n    return !isNaN(number) && isFinite(number);\r\n}\r\nfunction isPercentage(height) {\r\n    // Percentage height\r\n    return (typeof height === 'string' &&\r\n        height[height.length - 1] === '%' &&\r\n        isNumber(height.substring(0, height.length - 1)));\r\n}\r\nfunction hideContent(element, height) {\r\n    // Check for element?.style is added cause this would fail in tests (react-test-renderer)\r\n    // Read more here: https://github.com/Stanko/react-animate-height/issues/17\r\n    if (height === 0 && (element === null || element === void 0 ? void 0 : element.style)) {\r\n        element.style.display = 'none';\r\n    }\r\n}\r\nfunction showContent(element, height) {\r\n    // Check for element?.style is added cause this would fail in tests (react-test-renderer)\r\n    // Read more here: https://github.com/Stanko/react-animate-height/issues/17\r\n    if (height === 0 && (element === null || element === void 0 ? void 0 : element.style)) {\r\n        element.style.display = '';\r\n    }\r\n}\r\nconst ANIMATION_STATE_CLASSES = {\r\n    animating: 'rah-animating',\r\n    animatingUp: 'rah-animating--up',\r\n    animatingDown: 'rah-animating--down',\r\n    animatingToHeightZero: 'rah-animating--to-height-zero',\r\n    animatingToHeightAuto: 'rah-animating--to-height-auto',\r\n    animatingToHeightSpecific: 'rah-animating--to-height-specific',\r\n    static: 'rah-static',\r\n    staticHeightZero: 'rah-static--height-zero',\r\n    staticHeightAuto: 'rah-static--height-auto',\r\n    staticHeightSpecific: 'rah-static--height-specific',\r\n};\r\nfunction getStaticStateClasses(animationStateClasses, height) {\r\n    return [\r\n        animationStateClasses.static,\r\n        height === 0 && animationStateClasses.staticHeightZero,\r\n        height > 0 && animationStateClasses.staticHeightSpecific,\r\n        height === 'auto' && animationStateClasses.staticHeightAuto,\r\n    ]\r\n        .filter((v) => v)\r\n        .join(' ');\r\n}\r\nconst AnimateHeight = (_a) => {\r\n    var { animateOpacity = false, animationStateClasses = {}, applyInlineTransitions = true, children, className = '', contentClassName, delay: userDelay = 0, duration: userDuration = 500, easing = 'ease', height, onHeightAnimationEnd, onHeightAnimationStart, style } = _a, props = __rest(_a, [\"animateOpacity\", \"animationStateClasses\", \"applyInlineTransitions\", \"children\", \"className\", \"contentClassName\", \"delay\", \"duration\", \"easing\", \"height\", \"onHeightAnimationEnd\", \"onHeightAnimationStart\", \"style\"]);\r\n    // ------------------ Initialization\r\n    const prevHeight = useRef(height);\r\n    const contentElement = useRef(null);\r\n    const animationClassesTimeoutID = useRef();\r\n    const timeoutID = useRef();\r\n    const stateClasses = useRef(Object.assign(Object.assign({}, ANIMATION_STATE_CLASSES), animationStateClasses));\r\n    const isBrowser = typeof window !== 'undefined';\r\n    const prefersReducedMotion = useRef(isBrowser && window.matchMedia\r\n        ? window.matchMedia('(prefers-reduced-motion)').matches\r\n        : false);\r\n    const delay = prefersReducedMotion.current ? 0 : userDelay;\r\n    const duration = prefersReducedMotion.current ? 0 : userDuration;\r\n    let initHeight = height;\r\n    let initOverflow = 'visible';\r\n    if (typeof initHeight === 'number') {\r\n        // Reset negative height to 0\r\n        initHeight = height < 0 ? 0 : height;\r\n        initOverflow = 'hidden';\r\n    }\r\n    else if (isPercentage(initHeight)) {\r\n        // If value is string \"0%\" make sure we convert it to number 0\r\n        initHeight = height === '0%' ? 0 : height;\r\n        initOverflow = 'hidden';\r\n    }\r\n    const [currentHeight, setCurrentHeight] = useState(initHeight);\r\n    const [overflow, setOverflow] = useState(initOverflow);\r\n    const [useTransitions, setUseTransitions] = useState(false);\r\n    const [animationStateClassNames, setAnimationStateClassNames] = useState(getStaticStateClasses(stateClasses.current, height));\r\n    // ------------------ Did mount\r\n    useEffect(() => {\r\n        // Hide content if height is 0 (to prevent tabbing into it)\r\n        hideContent(contentElement.current, currentHeight);\r\n        // This should be explicitly run only on mount\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    // ------------------ Height update\r\n    useEffect(() => {\r\n        if (height !== prevHeight.current && contentElement.current) {\r\n            showContent(contentElement.current, prevHeight.current);\r\n            // Cache content height\r\n            contentElement.current.style.overflow = 'hidden';\r\n            const contentHeight = contentElement.current.offsetHeight;\r\n            contentElement.current.style.overflow = '';\r\n            // set total animation time\r\n            const totalDuration = duration + delay;\r\n            let newHeight;\r\n            let timeoutHeight;\r\n            let timeoutOverflow = 'hidden';\r\n            let timeoutUseTransitions;\r\n            const isCurrentHeightAuto = prevHeight.current === 'auto';\r\n            if (typeof height === 'number') {\r\n                // Reset negative height to 0\r\n                newHeight = height < 0 ? 0 : height;\r\n                timeoutHeight = newHeight;\r\n            }\r\n            else if (isPercentage(height)) {\r\n                // If value is string \"0%\" make sure we convert it to number 0\r\n                newHeight = height === '0%' ? 0 : height;\r\n                timeoutHeight = newHeight;\r\n            }\r\n            else {\r\n                // If not, animate to content height\r\n                // and then reset to auto\r\n                newHeight = contentHeight; // TODO solve contentHeight = 0\r\n                timeoutHeight = 'auto';\r\n                timeoutOverflow = undefined;\r\n            }\r\n            if (isCurrentHeightAuto) {\r\n                // This is the height to be animated to\r\n                timeoutHeight = newHeight;\r\n                // If previous height was 'auto'\r\n                // set starting height explicitly to be able to use transition\r\n                newHeight = contentHeight;\r\n            }\r\n            // Animation classes\r\n            const newAnimationStateClassNames = [\r\n                stateClasses.current.animating,\r\n                (prevHeight.current === 'auto' || height < prevHeight.current) &&\r\n                    stateClasses.current.animatingUp,\r\n                (height === 'auto' || height > prevHeight.current) &&\r\n                    stateClasses.current.animatingDown,\r\n                timeoutHeight === 0 && stateClasses.current.animatingToHeightZero,\r\n                timeoutHeight === 'auto' && stateClasses.current.animatingToHeightAuto,\r\n                timeoutHeight > 0 && stateClasses.current.animatingToHeightSpecific,\r\n            ]\r\n                .filter((v) => v)\r\n                .join(' ');\r\n            // Animation classes to be put after animation is complete\r\n            const timeoutAnimationStateClasses = getStaticStateClasses(stateClasses.current, timeoutHeight);\r\n            // Set starting height and animating classes\r\n            // When animating from 'auto' we first need to set fixed height\r\n            // that change should be animated\r\n            setCurrentHeight(newHeight);\r\n            setOverflow('hidden');\r\n            setUseTransitions(!isCurrentHeightAuto);\r\n            setAnimationStateClassNames(newAnimationStateClassNames);\r\n            // Clear timeouts\r\n            clearTimeout(timeoutID.current);\r\n            clearTimeout(animationClassesTimeoutID.current);\r\n            if (isCurrentHeightAuto) {\r\n                // When animating from 'auto' we use a short timeout to start animation\r\n                // after setting fixed height above\r\n                timeoutUseTransitions = true;\r\n                // Short timeout to allow rendering of the initial animation state first\r\n                timeoutID.current = setTimeout(() => {\r\n                    setCurrentHeight(timeoutHeight);\r\n                    setOverflow(timeoutOverflow);\r\n                    setUseTransitions(timeoutUseTransitions);\r\n                    // ANIMATION STARTS, run a callback if it exists\r\n                    onHeightAnimationStart === null || onHeightAnimationStart === void 0 ? void 0 : onHeightAnimationStart(timeoutHeight);\r\n                }, 50);\r\n                // Set static classes and remove transitions when animation ends\r\n                animationClassesTimeoutID.current = setTimeout(() => {\r\n                    setUseTransitions(false);\r\n                    setAnimationStateClassNames(timeoutAnimationStateClasses);\r\n                    // ANIMATION ENDS\r\n                    // Hide content if height is 0 (to prevent tabbing into it)\r\n                    hideContent(contentElement.current, timeoutHeight);\r\n                    // Run a callback if it exists\r\n                    onHeightAnimationEnd === null || onHeightAnimationEnd === void 0 ? void 0 : onHeightAnimationEnd(timeoutHeight);\r\n                }, totalDuration);\r\n            }\r\n            else {\r\n                // ANIMATION STARTS, run a callback if it exists\r\n                onHeightAnimationStart === null || onHeightAnimationStart === void 0 ? void 0 : onHeightAnimationStart(newHeight);\r\n                // Set end height, classes and remove transitions when animation is complete\r\n                timeoutID.current = setTimeout(() => {\r\n                    setCurrentHeight(timeoutHeight);\r\n                    setOverflow(timeoutOverflow);\r\n                    setUseTransitions(false);\r\n                    setAnimationStateClassNames(timeoutAnimationStateClasses);\r\n                    // ANIMATION ENDS\r\n                    // If height is auto, don't hide the content\r\n                    // (case when element is empty, therefore height is 0)\r\n                    if (height !== 'auto') {\r\n                        // Hide content if height is 0 (to prevent tabbing into it)\r\n                        hideContent(contentElement.current, newHeight); // TODO solve newHeight = 0\r\n                    }\r\n                    // Run a callback if it exists\r\n                    onHeightAnimationEnd === null || onHeightAnimationEnd === void 0 ? void 0 : onHeightAnimationEnd(newHeight);\r\n                }, totalDuration);\r\n            }\r\n        }\r\n        prevHeight.current = height;\r\n        return () => {\r\n            clearTimeout(timeoutID.current);\r\n            clearTimeout(animationClassesTimeoutID.current);\r\n        };\r\n        // This should be explicitly run only on height change\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [height]);\r\n    // ------------------ Render\r\n    const componentStyle = Object.assign(Object.assign({}, style), { height: currentHeight, overflow: overflow || (style === null || style === void 0 ? void 0 : style.overflow) });\r\n    if (useTransitions && applyInlineTransitions) {\r\n        componentStyle.transition = `height ${duration}ms ${easing} ${delay}ms`;\r\n        // Include transition passed through styles\r\n        if (style === null || style === void 0 ? void 0 : style.transition) {\r\n            componentStyle.transition = `${style.transition}, ${componentStyle.transition}`;\r\n        }\r\n        // Add webkit vendor prefix still used by opera, blackberry...\r\n        componentStyle.WebkitTransition = componentStyle.transition;\r\n    }\r\n    const contentStyle = {};\r\n    if (animateOpacity) {\r\n        contentStyle.transition = `opacity ${duration}ms ${easing} ${delay}ms`;\r\n        // Add webkit vendor prefix still used by opera, blackberry...\r\n        contentStyle.WebkitTransition = contentStyle.transition;\r\n        if (currentHeight === 0) {\r\n            contentStyle.opacity = 0;\r\n        }\r\n    }\r\n    // Check if user passed aria-hidden prop\r\n    const hasAriaHiddenProp = typeof props['aria-hidden'] !== 'undefined';\r\n    const ariaHidden = hasAriaHiddenProp ? props['aria-hidden'] : height === 0;\r\n    return (React.createElement(\"div\", Object.assign({}, props, { \"aria-hidden\": ariaHidden, className: `${animationStateClassNames} ${className}`, style: componentStyle }),\r\n        React.createElement(\"div\", { className: contentClassName, style: contentStyle, ref: contentElement }, children)));\r\n};\r\nexport default AnimateHeight;\r\n"],
  "mappings": "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",
  "names": ["React"]
}
