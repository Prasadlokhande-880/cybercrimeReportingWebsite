{
  "version": 3,
  "sources": ["../../react-click-away-listener/src/index.tsx"],
  "sourcesContent": ["import React, {\n\tuseRef,\n\tuseEffect,\n\tRefCallback,\n\tcloneElement,\n\tReactElement,\n\tHTMLAttributes,\n\tMutableRefObject,\n\tFunctionComponent\n} from 'react';\n\ntype FocusEvents = 'focusin' | 'focusout';\ntype MouseEvents = 'click' | 'mousedown' | 'mouseup';\ntype TouchEvents = 'touchstart' | 'touchend';\ntype Events = FocusEvent | MouseEvent | TouchEvent;\n\ninterface Props extends HTMLAttributes<HTMLElement> {\n\tonClickAway: (event: Events) => void;\n\tfocusEvent?: FocusEvents;\n\tmouseEvent?: MouseEvents;\n\ttouchEvent?: TouchEvents;\n\tchildren: ReactElement<any>;\n}\n\nconst eventTypeMapping = {\n\tclick: 'onClick',\n\tfocusin: 'onFocus',\n\tfocusout: 'onFocus',\n\tmousedown: 'onMouseDown',\n\tmouseup: 'onMouseUp',\n\ttouchstart: 'onTouchStart',\n\ttouchend: 'onTouchEnd'\n};\n\nconst ClickAwayListener: FunctionComponent<Props> = ({\n\tchildren,\n\tonClickAway,\n\tfocusEvent = 'focusin',\n\tmouseEvent = 'click',\n\ttouchEvent = 'touchend'\n}) => {\n\tconst node = useRef<HTMLElement | null>(null);\n\tconst bubbledEventTarget = useRef<EventTarget | null>(null);\n\tconst mountedRef = useRef(false);\n\n\t/**\n\t * Prevents the bubbled event from getting triggered immediately\n\t * https://github.com/facebook/react/issues/20074\n\t */\n\tuseEffect(() => {\n\t\tsetTimeout(() => {\n\t\t\tmountedRef.current = true;\n\t\t}, 0);\n\n\t\treturn () => {\n\t\t\tmountedRef.current = false;\n\t\t};\n\t}, []);\n\n\tconst handleBubbledEvents =\n\t\t(type: string) =>\n\t\t(event: Events): void => {\n\t\t\tbubbledEventTarget.current = event.target;\n\n\t\t\tconst handler = children?.props[type];\n\n\t\t\tif (handler) {\n\t\t\t\thandler(event);\n\t\t\t}\n\t\t};\n\n\tconst handleChildRef = (childRef: HTMLElement) => {\n\t\tnode.current = childRef;\n\n\t\tlet { ref } = children as typeof children & {\n\t\t\tref: RefCallback<HTMLElement> | MutableRefObject<HTMLElement>;\n\t\t};\n\n\t\tif (typeof ref === 'function') {\n\t\t\tref(childRef);\n\t\t} else if (ref) {\n\t\t\tref.current = childRef;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst nodeDocument = node.current?.ownerDocument ?? document;\n\n\t\tconst handleEvents = (event: Events): void => {\n\t\t\tif (!mountedRef.current) return;\n\n\t\t\tif (\n\t\t\t\t(node.current && node.current.contains(event.target as Node)) ||\n\t\t\t\tbubbledEventTarget.current === event.target ||\n\t\t\t\t!nodeDocument.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonClickAway(event);\n\t\t};\n\n\t\tnodeDocument.addEventListener(mouseEvent, handleEvents);\n\t\tnodeDocument.addEventListener(touchEvent, handleEvents);\n\t\tnodeDocument.addEventListener(focusEvent, handleEvents);\n\n\t\treturn () => {\n\t\t\tnodeDocument.removeEventListener(mouseEvent, handleEvents);\n\t\t\tnodeDocument.removeEventListener(touchEvent, handleEvents);\n\t\t\tnodeDocument.removeEventListener(focusEvent, handleEvents);\n\t\t};\n\t}, [focusEvent, mouseEvent, onClickAway, touchEvent]);\n\n\tconst mappedMouseEvent = eventTypeMapping[mouseEvent];\n\tconst mappedTouchEvent = eventTypeMapping[touchEvent];\n\tconst mappedFocusEvent = eventTypeMapping[focusEvent];\n\n\treturn React.Children.only(\n\t\tcloneElement(children as ReactElement<any>, {\n\t\t\tref: handleChildRef,\n\t\t\t[mappedFocusEvent]: handleBubbledEvents(mappedFocusEvent),\n\t\t\t[mappedMouseEvent]: handleBubbledEvents(mappedMouseEvent),\n\t\t\t[mappedTouchEvent]: handleBubbledEvents(mappedTouchEvent)\n\t\t})\n\t);\n};\n\nClickAwayListener.displayName = 'ClickAwayListener';\n\nexport default ClickAwayListener;\n"],
  "mappings": ";;;;;;;;;;;;AAwBA,IAAMA,IAAmB,EACxBC,OAAO,WACPC,SAAS,WACTC,UAAU,WACVC,WAAW,eACXC,SAAS,aACTC,YAAY,gBACZC,UAAU,aAAA;AAPX,IAUMC,IAA8C,SAM9CC,IAAAA;AAAA,MAAAC,GALLC,IAAAA,GAAAA,UACAC,IAAAA,GAAAA,aAIKC,IAAAJ,GAHLK,YAAAA,IAAAA,WAAAA,IAAa,YAGRD,GAAAE,IAAAN,GAFLO,YAAAA,IAAAA,WAAAA,IAAa,UAERD,GAAAE,IAAAR,GADLS,YAAAA,IAAAA,WAAAA,IAAa,aACRD,GACCE,QAAOC,aAAAA,QAA2B,IAAA,GAClCC,QAAqBD,aAAAA,QAA2B,IAAA,GAChDE,QAAaF,aAAAA,QAAAA,KAAO;AAM1BG,mBAAAA,WAAU,WAAA;AAKT,WAJAC,WAAW,WAAA;AACVF,QAAWG,UAAAA;IADF,GAEP,CAAA,GAEI,WAAA;AACNH,QAAWG,UAAAA;IACX;EAPO,GAQN,CAAA,CAAA;AAEH,MAAMC,IACL,SAACC,IAAAA;AACD,WAAA,SAACC,IAAAA;AACAP,QAAmBI,UAAUG,GAAMC;AAE7BC,UAAAA,KAAUnB,QAAAA,IAAAA,SAAAA,EAAUoB,MAAMJ,EAAAA;AAE5BG,MAAAA,MACHA,GAAQF,EAAAA;IAET;EATD;AAyBDL,mBAAAA,WAAU,WAAA;AAAM,QAAAS,IAAAC,IACTC,KAAY,UAAAC,KAAG,UAAAC,KAAAjB,EAAKM,YAAAA,WAALQ,KAAAA,SAAAA,GAAcI,kBAAAA,WAAjBL,KAAAA,KAAkCM,UAE9CC,KAAe,SAACX,IAAAA;AAChBN,QAAWG,YAGdN,EAAKM,WAAWN,EAAKM,QAAQe,SAASZ,GAAMC,MAAAA,KAC7CR,EAAmBI,YAAYG,GAAMC,UAAAA,CACpCK,GAAaM,SAASZ,GAAMC,MAAAA,KAK9BjB,EAAYgB,EAAAA;IACZ;AAMD,WAJAM,GAAaO,iBAAiBzB,GAAYuB,EAAAA,GAC1CL,GAAaO,iBAAiBvB,GAAYqB,EAAAA,GAC1CL,GAAaO,iBAAiB3B,GAAYyB,EAAAA,GAEnC,WAAA;AACNL,MAAAA,GAAaQ,oBAAoB1B,GAAYuB,EAAAA,GAC7CL,GAAaQ,oBAAoBxB,GAAYqB,EAAAA,GAC7CL,GAAaQ,oBAAoB5B,GAAYyB,EAAAA;IAC7C;EAzBO,GA0BN,CAACzB,GAAYE,GAAYJ,GAAaM,CAAAA,CAAAA;AAEzC,MAAMyB,IAAmB3C,EAAiBgB,CAAAA,GACpC4B,IAAmB5C,EAAiBkB,CAAAA,GACpC2B,IAAmB7C,EAAiBc,CAAAA;AAEnCgC,SAAAA,aAAAA,QAAMC,SAASC,SACrBC,aAAAA,cAAatC,IAEXkC,EAFUnC,IAAA,EACXwC,KAhDqB,SAACC,IAAAA;AACvBhC,MAAKM,UAAU0B;AAEf,QAAMD,KAAQvC,EAARuC;AAIa,kBAAA,OAARA,KACVA,GAAIC,EAAAA,IACMD,OACVA,GAAIzB,UAAU0B;EAEf,EAAA,GAqCEN,GAAmBnB,EAAoBmB,CAAAA,CAAAA,GAF7BO,EAAA1C,GAGViC,GAAmBjB,EAAoBiB,CAAAA,CAAAA,GAAAA,EAAAA,GACvCC,GAAmBlB,EAAoBkB,CAAAA,CAAAA,GAJ7BlC,EAAAA,CAAAA;AAOb;AAEDF,EAAkB6C,cAAc;",
  "names": ["eventTypeMapping", "click", "focusin", "focusout", "mousedown", "mouseup", "touchstart", "touchend", "ClickAwayListener", "_ref", "_cloneElement", "children", "onClickAway", "_ref$focusEvent", "focusEvent", "_ref$mouseEvent", "mouseEvent", "_ref$touchEvent", "touchEvent", "node", "useRef", "bubbledEventTarget", "mountedRef", "useEffect", "setTimeout", "current", "handleBubbledEvents", "type", "event", "target", "handler", "props", "_node$current$ownerDo", "_node$current", "nodeDocument", "n", "e", "ownerDocument", "document", "handleEvents", "contains", "addEventListener", "removeEventListener", "mappedMouseEvent", "mappedTouchEvent", "mappedFocusEvent", "React", "Children", "only", "cloneElement", "ref", "childRef", "_defineProperty", "displayName"]
}
