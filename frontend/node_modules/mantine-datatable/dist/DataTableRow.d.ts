import { type Sx } from '@mantine/core';
import type { ChangeEventHandler, CSSProperties, MouseEventHandler, ReactNode } from 'react';
import { useRowExpansion } from './hooks';
import type { DataTableCellClickHandler, DataTableColumn } from './types';
type DataTableRowProps<T> = {
    record: T;
    recordIndex: number;
    columns: DataTableColumn<T>[];
    defaultColumnRender: ((record: T, index: number, accessor: string) => ReactNode) | undefined;
    selectionVisible: boolean;
    selectionChecked: boolean;
    onSelectionChange: ChangeEventHandler<HTMLInputElement> | undefined;
    isRecordSelectable: ((record: T, index: number) => boolean) | undefined;
    onClick: MouseEventHandler<HTMLTableRowElement> | undefined;
    onCellClick: DataTableCellClickHandler<T> | undefined;
    onContextMenu: MouseEventHandler<HTMLTableRowElement> | undefined;
    expansion: ReturnType<typeof useRowExpansion<T>>;
    customRowAttributes?: (record: T, recordIndex: number) => Record<string, string | number>;
    className?: string | ((record: T, recordIndex: number) => string | undefined);
    style?: CSSProperties | ((record: T, recordIndex: number) => CSSProperties | undefined);
    sx?: Sx;
    contextMenuVisible: boolean;
    leftShadowVisible: boolean;
};
export default function DataTableRow<T>({ record, recordIndex, columns, defaultColumnRender, selectionVisible, selectionChecked, onSelectionChange, isRecordSelectable, onClick, onCellClick, onContextMenu, expansion, customRowAttributes, className, style, sx, contextMenuVisible, leftShadowVisible, }: DataTableRowProps<T>): JSX.Element;
export {};
//# sourceMappingURL=DataTableRow.d.ts.map