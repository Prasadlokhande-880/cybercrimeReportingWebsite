// src/SimpleMdeReact.tsx
import React, {
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState
} from "react";
import SimpleMDE from "easymde";
var _id = 0;
var generateId = () => `simplemde-editor-${++_id}`;
var useHandleEditorInstanceLifecycle = ({
  options,
  id,
  currentValueRef,
  textRef
}) => {
  const [editor, setEditor] = useState(null);
  const imageUploadCallback = useCallback(
    (file, onSuccess, onError) => {
      const imageUpload = options == null ? void 0 : options.imageUploadFunction;
      if (imageUpload) {
        const _onSuccess = (url) => {
          onSuccess(url);
        };
        imageUpload(file, _onSuccess, onError);
      }
    },
    [options == null ? void 0 : options.imageUploadFunction]
  );
  const editorRef = useRef(editor);
  editorRef.current = editor;
  useEffect(() => {
    let editor2;
    if (textRef) {
      const initialOptions = {
        element: textRef,
        initialValue: currentValueRef.current
      };
      const imageUploadFunction = (options == null ? void 0 : options.imageUploadFunction) ? imageUploadCallback : void 0;
      editor2 = new SimpleMDE(
        Object.assign({}, initialOptions, options, {
          imageUploadFunction
        })
      );
      setEditor(editor2);
    }
    return () => {
      editor2 == null ? void 0 : editor2.toTextArea();
      editor2 == null ? void 0 : editor2.cleanup();
    };
  }, [textRef, currentValueRef, id, imageUploadCallback, options]);
  const codemirror = useMemo(() => {
    return editor == null ? void 0 : editor.codemirror;
  }, [editor == null ? void 0 : editor.codemirror]);
  return { editor, codemirror };
};
var SimpleMdeReact = React.forwardRef((props, ref) => {
  const {
    events,
    value,
    options,
    children,
    extraKeys,
    getLineAndCursor,
    getMdeInstance,
    getCodemirrorInstance,
    onChange,
    id: anId,
    placeholder,
    textareaProps,
    ...rest
  } = props;
  const id = useMemo(() => anId ?? generateId(), [anId]);
  const elementWrapperRef = useRef(null);
  const nonEventChangeRef = useRef(true);
  const currentValueRef = useRef(value);
  currentValueRef.current = value;
  const [textRef, setTextRef] = useState(null);
  const { editor, codemirror } = useHandleEditorInstanceLifecycle({
    options,
    id,
    currentValueRef,
    textRef
  });
  useEffect(() => {
    if (nonEventChangeRef.current) {
      editor == null ? void 0 : editor.value(value ?? "");
    }
    nonEventChangeRef.current = true;
  }, [editor, value]);
  const onCodemirrorChangeHandler = useCallback(
    (_, changeObject) => {
      if ((editor == null ? void 0 : editor.value()) !== currentValueRef.current) {
        nonEventChangeRef.current = false;
        onChange == null ? void 0 : onChange((editor == null ? void 0 : editor.value()) ?? "", changeObject);
      }
    },
    [editor, onChange]
  );
  useEffect(() => {
    if (options == null ? void 0 : options.autofocus) {
      codemirror == null ? void 0 : codemirror.focus();
      codemirror == null ? void 0 : codemirror.setCursor(codemirror == null ? void 0 : codemirror.lineCount(), 0);
    }
  }, [codemirror, options == null ? void 0 : options.autofocus]);
  const getCursorCallback = useCallback(() => {
    codemirror && (getLineAndCursor == null ? void 0 : getLineAndCursor(codemirror.getDoc().getCursor()));
  }, [codemirror, getLineAndCursor]);
  useEffect(() => {
    getCursorCallback();
  }, [getCursorCallback]);
  useEffect(() => {
    editor && (getMdeInstance == null ? void 0 : getMdeInstance(editor));
  }, [editor, getMdeInstance]);
  useEffect(() => {
    codemirror && (getCodemirrorInstance == null ? void 0 : getCodemirrorInstance(codemirror));
  }, [codemirror, getCodemirrorInstance, getMdeInstance]);
  useEffect(() => {
    if (extraKeys && codemirror) {
      codemirror.setOption(
        "extraKeys",
        Object.assign({}, codemirror.getOption("extraKeys"), extraKeys)
      );
    }
  }, [codemirror, extraKeys]);
  useEffect(() => {
    var _a;
    const toolbarNode = (_a = elementWrapperRef.current) == null ? void 0 : _a.getElementsByClassName(
      "editor-toolbarNode"
    )[0];
    const handler = codemirror && onCodemirrorChangeHandler;
    if (handler) {
      toolbarNode == null ? void 0 : toolbarNode.addEventListener("click", handler);
      return () => {
        toolbarNode == null ? void 0 : toolbarNode.removeEventListener("click", handler);
      };
    }
    return () => {
    };
  }, [codemirror, onCodemirrorChangeHandler]);
  useEffect(() => {
    codemirror == null ? void 0 : codemirror.on("change", onCodemirrorChangeHandler);
    codemirror == null ? void 0 : codemirror.on("cursorActivity", getCursorCallback);
    return () => {
      codemirror == null ? void 0 : codemirror.off("change", onCodemirrorChangeHandler);
      codemirror == null ? void 0 : codemirror.off("cursorActivity", getCursorCallback);
    };
  }, [codemirror, getCursorCallback, onCodemirrorChangeHandler]);
  const prevEvents = useRef(events);
  useEffect(() => {
    const isNotFirstEffectRun = events !== prevEvents.current;
    isNotFirstEffectRun && prevEvents.current && Object.entries(prevEvents.current).forEach(([event, handler]) => {
      handler && (codemirror == null ? void 0 : codemirror.off(event, handler));
    });
    events && Object.entries(events).forEach(([event, handler]) => {
      handler && (codemirror == null ? void 0 : codemirror.on(event, handler));
    });
    prevEvents.current = events;
    return () => {
      events && Object.entries(events).forEach(([event, handler]) => {
        handler && (codemirror == null ? void 0 : codemirror.off(event, handler));
      });
    };
  }, [codemirror, events]);
  return /* @__PURE__ */ React.createElement("div", {
    id: `${id}-wrapper`,
    ...rest,
    ref: (aRef) => {
      if (typeof ref === "function") {
        ref(aRef);
      } else if (ref) {
        ref.current = aRef;
      }
      elementWrapperRef.current = aRef;
    }
  }, /* @__PURE__ */ React.createElement("textarea", {
    ...textareaProps,
    id,
    placeholder,
    ref: setTextRef,
    style: { display: "none" }
  }));
});
SimpleMdeReact.displayName = "SimpleMdeReact";
var SimpleMdeReact_default = SimpleMdeReact;
export {
  SimpleMdeReact,
  SimpleMdeReact_default as default
};
//# sourceMappingURL=SimpleMdeReact.mjs.map